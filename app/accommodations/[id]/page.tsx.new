import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import dynamic from 'next/dynamic';
import Image from 'next/image';
import Link from 'next/link';
import Comments from '@/components/Comments';
import CompareButton from '@/components/CompareButton';

type RawData = {
  images?: string[] | null;
  equipements?: string[] | null;
  [key: string]: any;
};

type Accommodation = {
  _id: string;
  title: string;
  url: string;
  latitude: number;
  longitude: number;
  address?: string;
  price?: number;
  surface?: number;
  rooms?: number;
  description?: string;
  images?: string[] | null;
  equipments?: string[] | null;
  source?: string;
  lastScraped?: string;
  rawData?: RawData;
};

// Dynamically import Map component with SSR disabled
const Map = dynamic(() => import('../Map'), { 
  ssr: false, 
  loading: () => (
    <div className="h-64 bg-gray-200 flex items-center justify-center rounded-lg">
      <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  )
});

export default function AccommodationDetailPage() {
  const { id } = useParams();
  const [accommodation, setAccommodation] = useState<Accommodation | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  // Vérifier si l'utilisateur est connecté
  useEffect(() => {
    const checkLoginStatus = async () => {
      try {
        const response = await fetch('/api/user/status');
        if (response.ok) {
          const data = await response.json();
          setIsLoggedIn(data.isLoggedIn);
        }
      } catch (error) {
        console.error('Erreur lors de la vérification du statut de connexion:', error);
      }
    };

    checkLoginStatus();
  }, []);

  // Charger les détails du logement
  useEffect(() => {
    if (!id) return;

    const fetchAccommodation = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/accommodations/${id}`);
        
        if (!response.ok) {
          throw new Error('Erreur lors du chargement du logement');
        }
        
        const data = await response.json();
        setAccommodation(data);
      } catch (error) {
        console.error('Erreur:', error);
        setError('Erreur lors du chargement du logement');
      } finally {
        setLoading(false);
      }
    };

    fetchAccommodation();
  }, [id]);

  // Gérer le clic sur une image miniature
  const handleThumbnailClick = (clickedImg: string, index: number) => {
    if (!accommodation?.images) return;
    
    const newImages = [...accommodation.images];
    newImages[0] = clickedImg;
    newImages[index] = accommodation.images[0];
    
    setAccommodation({
      ...accommodation,
      images: newImages
    });
  };

  // Formater le prix
  const formatPrice = (price: number | undefined) => {
    if (!price) return 'Prix non spécifié';
    return new Intl.NumberFormat('fr-FR', { 
      style: 'currency', 
      currency: 'EUR',
      maximumFractionDigits: 0 
    }).format(price);
  };

  // Formater la surface
  const formatSurface = (surface: number | undefined) => {
    if (!surface) return 'Non spécifiée';
    return `${surface} m²`;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">Erreur ! </strong>
          <span className="block sm:inline">{error}</span>
        </div>
      </div>
    );
  }

  if (!accommodation) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">Avertissement ! </strong>
          <span className="block sm:inline">Aucun logement trouvé avec cet identifiant.</span>
        </div>
      </div>
    );
  }

  const { 
    title, 
    price, 
    surface, 
    rooms, 
    address, 
    description, 
    images = [], 
    equipments = [],
    latitude,
    longitude
  } = accommodation;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        {/* En-tête avec image et titre */}
        <div className="relative">
          {images && images.length > 0 ? (
            <div className="relative group">
              <div className="relative w-full h-96 overflow-hidden">
                <Image 
                  src={images[0]} 
                  alt={title}
                  fill
                  className="object-cover transition-transform duration-300 group-hover:scale-105"
                  priority
                  sizes="(max-width: 1200px) 100vw, 1200px"
                />
              </div>
              
              {/* Galerie d'images miniatures en bas */}
              {images.length > 1 && (
                <div className="absolute bottom-4 left-0 right-0 px-4">
                  <div className="flex space-x-2 overflow-x-auto pb-2 scrollbar-hide">
                    {images.map((img: string, index: number) => (
                      <div 
                        key={index}
                        className="relative flex-shrink-0 w-16 h-12 cursor-pointer rounded-md overflow-hidden border-2 border-transparent hover:border-blue-400 transition-all"
                        onClick={() => handleThumbnailClick(img, index)}
                      >
                        <Image 
                          src={img}
                          alt={`${title} ${index + 1}`}
                          fill
                          className="object-cover"
                          sizes="64px"
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-6">
                <h1 className="text-3xl font-bold text-white">{title}</h1>
                {price && (
                  <p className="text-2xl font-semibold text-white mt-2">{formatPrice(price)}</p>
                )}
              </div>
            </div>
          ) : (
            <div className="w-full h-96 bg-gray-200 flex items-center justify-center">
              <span className="text-gray-400">Aucune image disponible</span>
              <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-6">
                <h1 className="text-3xl font-bold text-white">{title}</h1>
                {price && (
                  <p className="text-2xl font-semibold text-white mt-2">{formatPrice(price)}</p>
                )}
              </div>
            </div>
          )}
        </div>

        <div className="p-6">
          {/* Section Détails */}
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-4">Détails du logement</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Colonne de gauche - Détails */}
              <div>
                <div className="space-y-4">
                  {surface && <p><span className="font-medium">Surface :</span> {formatSurface(surface)}</p>}
                  {rooms && <p><span className="font-medium">Pièces :</span> {rooms}</p>}
                  {address && <p><span className="font-medium">Adresse :</span> {address}</p>}
                </div>
                
                {/* Équipements */}
                {equipments && equipments.length > 0 && (
                  <div className="mt-6">
                    <h3 className="text-xl font-semibold mb-3">Équipements</h3>
                    <div className="flex flex-wrap gap-2">
                      {equipments.map((equipment, index) => (
                        <span 
                          key={index}
                          className="bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full"
                        >
                          {equipment}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
              
              {/* Colonne de droite - Carte */}
              <div>
                {latitude && longitude && (
                  <div className="h-64 rounded-lg overflow-hidden">
                    <Map 
                      center={[latitude, longitude]} 
                      zoom={15} 
                      markers={[{ lat: latitude, lng: longitude, title }]}
                      className="h-full w-full"
                    />
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* Description */}
          {description && (
            <div className="mb-8">
              <h2 className="text-2xl font-bold mb-4">Description</h2>
              <div className="prose max-w-none">
                <p>{description}</p>
              </div>
            </div>
          )}
          
          {/* Commentaires */}
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-4">Commentaires</h2>
            <div className="bg-gray-50 p-6 rounded-lg">
              <Comments accommodationId={id as string} />
            </div>
          </div>
        </div>
        
        {/* Boutons d'action */}
        <div className="bg-gray-50 px-6 py-4 border-t border-gray-200 flex justify-between items-center">
          <Link 
            href={accommodation.url} 
            target="_blank" 
            rel="noopener noreferrer"
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
          >
            Voir l'annonce originale
          </Link>
          
          <div className="flex space-x-4">
            <CompareButton accommodationId={id as string} />
            
            <button 
              className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors"
              onClick={() => window.history.back()}
            >
              Retour
            </button>
            
            {isLoggedIn ? (
              <form action="/api/user/logout" method="POST" className="inline">
                <button 
                  type="submit" 
                  className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
                >
                  Déconnexion
                </button>
              </form>
            ) : (
              <Link 
                href="/login" 
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
              >
                Connexion
              </Link>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
